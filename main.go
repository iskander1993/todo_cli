package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"

	"github.com/iskander1993/todo_cli/todo"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
	todo.LoadTasksFromFile()

	reader := bufio.NewReader(os.Stdin)

	fmt.Println("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ To-Do CLI. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

	for {
		fmt.Print("> ")
		input, _ := reader.ReadString('\n')
		input = strings.TrimSpace(input)

		switch {
		// –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
		case input == "list" || input == "l":
			todo.ListTasks("all")
		case input == "list done" || input == "l d":
			todo.ListTasks("done")
		case input == "list pending" || input == "l p":
			todo.ListTasks("pending")

		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
		case strings.HasPrefix(input, "add ") || strings.HasPrefix(input, "a "):
			name := strings.TrimPrefix(input, "add ")
			name = strings.TrimPrefix(name, "a ")
			if name == "" {
				fmt.Println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã add")
				continue
			}
			todo.AddTask(name)
			fmt.Println("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

		// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
		case strings.HasPrefix(input, "remove ") || strings.HasPrefix(input, "r "):
			idStr := strings.TrimPrefix(input, "remove ")
			idStr = strings.TrimPrefix(idStr, "r ")
			id, err := strconv.Atoi(strings.TrimSpace(idStr))
			if err != nil {
				fmt.Println("–ù–µ–≤–µ—Ä–Ω—ã–π ID")
				continue
			}
			todo.RemoveTask(id)
			fmt.Println("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")

		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
		case strings.HasPrefix(input, "update ") || strings.HasPrefix(input, "u "):
			args := strings.Fields(strings.TrimPrefix(input, "update "))
			if len(args) < 2 {
				args = strings.Fields(strings.TrimPrefix(input, "u "))
			}
			if len(args) < 2 {
				fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: update <ID> <–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>")
				continue
			}
			id, err := strconv.Atoi(args[0])
			if err != nil {
				fmt.Println("–ù–µ–≤–µ—Ä–Ω—ã–π ID")
				continue
			}
			newName := strings.Join(args[1:], " ")
			todo.UpdateTask(id, newName)
			fmt.Println("–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

		// –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
		case strings.HasPrefix(input, "done ") || strings.HasPrefix(input, "d "):
			idStr := strings.TrimPrefix(input, "done ")
			idStr = strings.TrimPrefix(idStr, "d ")
			id, err := strconv.Atoi(strings.TrimSpace(idStr))
			if err != nil {
				fmt.Println("–ù–µ–≤–µ—Ä–Ω—ã–π ID")
				continue
			}
			todo.MarkDone(id)
			fmt.Println("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

			// –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
		case strings.HasPrefix(input, "undone ") || strings.HasPrefix(input, "ud "):
			idStr := strings.TrimPrefix(input, "undone ")
			idStr = strings.TrimPrefix(idStr, "ud ")
			id, err := strconv.Atoi(strings.TrimSpace(idStr))
			if err != nil {
				fmt.Println("–ù–µ–≤–µ—Ä–Ω—ã–π ID")
				continue
			}
			todo.MarkUndone(id)
			fmt.Println("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!")

		// –í—ã—Ö–æ–¥
		case input == "exit":
			fmt.Println("–í—ã—Ö–æ–¥...")
			return

		// –ü–æ–º–æ—â—å
		case input == "help" || input == "h":
			fmt.Println(`
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìã –ü—Ä–æ—Å–º–æ—Ç—Ä:
  list / l              - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
  list done / l d       - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
  list pending / l p    - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ

‚úèÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
  add <–Ω–∞–∑–≤–∞–Ω–∏–µ> / a    - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
  update <ID> <–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ> / u - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
  remove <ID> / r       - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É

‚úÖ –°—Ç–∞—Ç—É—Å:
  done <ID> / d         - –ø–æ–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
  undone <ID> / ud      - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

‚ÑπÔ∏è  –ü—Ä–æ—á–µ–µ:
  help / h              - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  exit                  - –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
`)

		// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
		default:
			fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
		}
	}
}
