package todo

import (
	"fmt"
	"time"

	"github.com/iskander1993/todo_cli/storage"
)

type Task struct {
	ID        int    `json:"id"`
	Name      string `json:"name"`
	Done      bool   `json:"done"`
	CreatedAt string `json:"created_at"`
}

var tasks []Task
var maxID int

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
func LoadTasksFromFile() {
	tasksFromFile, err := storage.LoadTasks[Task]()
	if err != nil {
		fmt.Println("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:", err)
	}
	tasks = tasksFromFile

	maxID = 0
	for _, task := range tasks {
		if task.ID > maxID {
			maxID = task.ID
		}
	}
	if len(tasks) > 0 {
		fmt.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: %d\n", len(tasks))
	}
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
func SaveTasksToFile() {
	err := storage.SaveTasks(tasks)
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á:", err)
	}
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
func AddTask(name string) {
	maxID++
	newTask := Task{
		ID:        maxID,
		Name:      name,
		Done:      false,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
	}
	tasks = append(tasks, newTask)
	SaveTasksToFile()
}

// –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
// filter: "all" - –≤—Å–µ, "done" - –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, "pending"
func ListTasks(filter string) {
	if len(tasks) == 0 {
		fmt.Println("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç")
		return
	}

	//–§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏
	filteredTasks := []Task{}
	for _, task := range tasks {
		if filter == "all" ||
			(filter == "done" && task.Done) ||
			(filter == "pending" && !task.Done) {
			filteredTasks = append(filteredTasks, task)
		}
	}

	if len(filteredTasks) == 0 {
		switch filter {
		case "done":
			fmt.Println("üìã –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
		case "pending":
			fmt.Println("üìã –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
		}
		return
	}

	//–ö—Ä–∞—Å–∏–≤—ã–≤–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å—Ç–∞—Ç–∏–∫–æ–π
	switch filter {
	case "done":
		fmt.Printf("\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (%d):\n", len(filteredTasks))
	case "pending":
		fmt.Printf("\n‚è≥ –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (%d):\n", len(filteredTasks))
	default:
		fmt.Printf("\nüìã –í—Å–µ –∑–∞–¥–∞—á–∏ (–≤—Å–µ–≥–æ: %d, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: %d, –æ—Å—Ç–∞–ª–æ—Å—å: %d):\n",
			len(tasks), countDone(), len(tasks)-countDone())
	}
	//–í—ã–≤–æ–¥ –∑–∞–¥–∞—á

	for _, task := range filteredTasks {
		status := "‚úñ"
		if task.Done {
			status = "‚úî"
		}
		fmt.Println("  %d. [%s] %s\n", task.ID, status, task.Name)

	}
	fmt.Println()
}

func countDone() int {
	count := 0
	for _, task := range tasks {
		if task.Done {
			count++
		}
	}
	return count
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID
func RemoveTask(id int) {
	index := -1
	for i, task := range tasks {
		if task.ID == id {
			index = i
			break
		}
	}

	if index == -1 {
		fmt.Println("‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	tasks = append(tasks[:index], tasks[index+1:]...)
	SaveTasksToFile()
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
func UpdateTask(id int, newName string) {
	found := false
	for i, task := range tasks {
		if task.ID == id {
			tasks[i].Name = newName
			found = true
			break
		}
	}
	if !found {
		fmt.Println("‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	SaveTasksToFile()
}

// –ü–æ–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
func MarkDone(id int) {
	found := false
	for i, task := range tasks {
		if task.ID == id {
			if !tasks[i].Done {
				fmt.Println("‚ÑπÔ∏è–ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
				return
			}
			tasks[i].Done = true
			found = true
			break
		}
	}

	if !found {
		fmt.Println("‚ùå–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	SaveTasksToFile()
}
